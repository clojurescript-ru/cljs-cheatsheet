===== Name
cljs.core/->

===== Type
макрос

===== Signature
[x & forms]

===== Description

The thread-first macro "threads" an expression through several forms as the
second item in a list.

Inserts `x` as the second item in the first form, making a list of it if it is
not a list already. If there are more forms, inserts the first form as the
second item in second form, etc.

<table class="code-tbl-9bef6">
  <thead>
    <tr>
      <th>Code</th>
      <th>Expands To</th></tr></thead>
  <tbody>
    <tr>
      <td><pre>
(-> x
  (a b c)
  d
  (x y z))</pre></td>
      <td><pre>
(x (d (a x b c)) y z)</pre></td></tr></tbody></table>

===== Related
cljs.core/->>

===== TODO
add threading macro animations link here

===== Example#19b460

The first is arguably a bit more cumbersome to read than the second:

```
(first (.split (.replace (.toUpperCase "a b c d") "A" "X") " "))
;;=> "X"

(-> "a b c d"
    .toUpperCase
    (.replace "A" "X")
    (.split " ")
    first)
;;=> "X"
```
===== Example#78ad8f

It can also be useful for pulling values out of deeply-nested
data structures:

```
(def person
  {:name "Mark Volkmann"
   :address {:street "644 Glen Summit"
             :city "St. Charles"
             :state "Missouri"
             :zip 63304}
   :employer {:name "Object Computing, Inc."
              :address {:street "12140 Woodcrest Dr."
                        :city "Creve Coeur"
                        :state "Missouri"
                        :zip 63141}}})

(-> person :employer :address :city)
;;=> "Creve Coeur"
```

Same as above, but with more nesting:

```
(:city (:address (:employer person)))
;;=> "Creve Coeur"
```

===== Example#5fe621

It can also help with arithmetic:

```
(def c 5)
(-> c (+ 3) (/ 2) (- 1))
;;=> 3
```

Same as above, but with more nesting:

```
(- (/ (+ c 3) 2) 1)
;;=> 3
```

